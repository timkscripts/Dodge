<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Character Width
global.charWidth = 80;
charWidth = global.charWidth;
//Character position on screen
charposX = 0;
charposY = 480 - charWidth;
//Light position to follow character on screen
lightposY = charposY + charWidth;
lightposX = charposX + (charWidth/2);
//Generate the Character instance
character = instance_create(charposX, charposY, obj_character);
//Generate the Light Instance to follow character
characterLight = instance_create(lightposX, lightposY, obj_light);
//How many pixels per frame should our character move to a static location?
charMoveInc=10;
//When you click the mouse down, find the 'area' you clicked to move your character
currentArea = 0; // 0 is left move, 3 is right most....0,1,2,3
// How long has it been since last Orb spawn?
lastSpawn = 0;
// How much space is there between orb spawns?
orbSpace = 320;//200;//320;
maxOrbSpace = 160;
// current difficulty
global.difficulty = 1;//1;
// Light up the score area
instance_create(0, -50, obj_light);
instance_create(20, -50, obj_light);
instance_create(200, -50, obj_light);
instance_create(260, -50, obj_light);
//load high scores
ini_open("Save.ini")
highscore_add("You", ini_read_real("Save1","score",0) );
ini_close();
//powerup
global.powerMeter = 0; //max 5
powerMeterDraw = 0; //if 0, not drawn
//*******************************
//Global varaibles
// How fast does the enemy scroll down?
global.enemySpeed = 4;
// The players score
global.score = 0;
// How much do you increment the score?
global.scoreInc = 10;
// is character invulnerable?
global.powerupActive = 0; //1 is on
// start powerup timer for how long you are invulnerable
powerupTimer = 60*3;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main Step code
// Determine if the game is over
with (obj_character){
    if place_meeting(x, y, obj_enemyBlue) &amp;&amp; (global.powerupActive == 0){
        with (obj_main){
            instance_destroy();
        }
        with (obj_enemyBlue){
            instance_destroy();
        }
        with (obj_light){
            instance_destroy();
        }
        with (obj_lightBlue){
            instance_destroy();
        }
        with (obj_lightRed){
            instance_destroy();
        }
        with (obj_powerup) {
             instance_destroy();
        }
        if (global.score &gt; highscore_value(1)){
            highscore_clear();
            highscore_add("You", global.score);
        }
        ini_open("Save.ini")
        if global.score&gt;ini_read_real("Save1","score",0)
        { ini_write_real("Save1","score",global.score);}
        ini_close();
        
        instance_create(160, 160, obj_light);
        instance_create(160, 160, obj_btn);
        instance_create(160, 160, obj_btn_start);
        
        instance_destroy();
    }
    if place_meeting(x, y, obj_powerup) {
        with (obj_powerup) {
             if place_meeting(x, y, obj_character) {
                with (power_light) {
                    instance_destroy();
                }
                instance_destroy();
             }
        }
        if (global.powerMeter &lt; 5){
            global.powerMeter += 1;
           
        }
    }
}

// Enemy spawn logic
if (lastSpawn &lt;= 0){
    ran = irandom_range(0, 4);
    if (ran &gt;= 0){//spawn powerup
        ran = irandom_range(0, 3);
        instance_create(ran * charWidth, -1 * charWidth-(charWidth*1.5), obj_powerup);
    }
    ran = irandom_range(0, 3);
    if (global.difficulty &lt;= 5){
        instance_create(ran * charWidth, -1 * charWidth, obj_enemyBlue);
    }
    if (global.difficulty &gt; 5 &amp;&amp; global.difficulty &lt; 20){
        instance_create(ran * charWidth, -1 * charWidth, obj_enemyBlue);
        ran2 = irandom_range(0, 1);
        if (ran2 == 1){
            ran2 = irandom_range(0, 3);
            while (ran2 == ran)
            {
                ran2 = irandom_range(0, 3);
            }//do while
            instance_create(ran2 * charWidth, -1 * charWidth, obj_enemyBlue);
        } 
    }//dificulty 5 to 20
     else if (global.difficulty &gt;= 20 &amp;&amp; global.difficulty &lt; 60){
            instance_create(ran * charWidth, -1 * charWidth, obj_enemyBlue);
            ran2 = irandom_range(0, 3);
            while (ran2 == ran)
            {
                ran2 = irandom_range(0, 3);
            }//do while
            instance_create(ran2 * charWidth, -1 * charWidth, obj_enemyBlue);
     
     } else if (global.difficulty &gt;= 60){
        
        ran2 = irandom_range(0, 2);
        if (ran2 == 0){
            ran2 = irandom_range(0, 3);
            while (ran2 == ran)
            {
                ran2 = irandom_range(0, 3);
            }//do while
            instance_create(ran2 * charWidth, -1 * charWidth, obj_enemyBlue);
            maxOrbSpace = 160;
        } else if (ran2 == 1){
            ran2 = irandom_range(0, 3);
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*1.5), obj_enemyBlue);
            ran2 = irandom_range(0, 3);
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*2), obj_enemyBlue);
            maxOrbSpace = 320;
        } else if (ran2 == 2){
            m = 1;
            ran2 = 0;
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*m), obj_enemyBlue);
            
            m += 1;
            ran2 = 1;
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*m), obj_enemyBlue);
            
            m += 1;
            ran2 = 2;
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*m), obj_enemyBlue);
            
            m += 1;
            ran2 = 1;
            instance_create(ran2 * charWidth, -1 * charWidth - (charWidth*m), obj_enemyBlue);
            
            maxOrbSpace = 640;
        }
     }
     orbSpace -= 2;
     if (orbSpace &lt; maxOrbSpace){
        orbSpace = maxOrbSpace;
     }
    
    lastSpawn = orbSpace;
} else {
lastSpawn -= global.enemySpeed;
}
//Input
if device_mouse_check_button(0, mb_left)
{
    //If you are in the first area (farthest left)
   if (device_mouse_x(0) &lt; 80){
        if (charposX != 0){
            currentArea = 0;
        }
   } else if (device_mouse_x(0) &gt;= 80 ) &amp;&amp; (device_mouse_x(0) &lt; 160){
        if (charposX != charWidth){
            currentArea = 1;
        }
   } else if (device_mouse_x(0) &gt;= 160 ) &amp;&amp; (device_mouse_x(0) &lt; 240){
        if (charposX != (charWidth*2)){
            currentArea = 2;
        }
   } else if (device_mouse_x(0) &gt;= 240 ){
        if (charposX != (charWidth*3)){
            currentArea = 3;
        }
   }
   
}
// Calculating where to move your character
if (currentArea == 0){
    if (charposX != 0){
        charposX -= charMoveInc;
    }
} else if (currentArea == 1){
    if (charposX &gt; charWidth){
        charposX -= charMoveInc;
    } else if (charposX &lt; charWidth){
        charposX += charMoveInc;
    }
} else if (currentArea == 2){
    if (charposX &gt; (charWidth*2)){
        charposX -= charMoveInc;
    } else if (charposX &lt; (charWidth*2)){
        charposX += charMoveInc;
    }
} else if (currentArea == 3){
    if (charposX != (charWidth*3) ){
        charposX += charMoveInc;
    }
}

//Draw powerup if OK
if (global.powerMeter == 5 &amp;&amp; powerMeterDraw == 0){
    powerMeterDraw = 1;
    powerMeterInstance = instance_create(charposX, charposY, obj_btn);
    with (powerMeterInstance) {
        image_xscale = 1;
        image_yscale = 0.26;
    }
}
if (powerMeterDraw == 1){
    with (powerMeterInstance) {
        if mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, bbox_left, bbox_top, bbox_right, bbox_bottom) {
            other.powerMeterDraw = 0;
            global.powerMeter = 0;
            global.powerupActive = 1;
            other.powerupTimer = 60*3;
            instance_destroy();
        }
    }
}
if (global.powerupActive == 1){
    powerupTimer -= 1;
}
if (powerupTimer &lt;= 0){
    powerupTimer = 0;
    global.powerupActive = 0;
}
// Every frame adjust the characters position
with (character){
x = other.charposX;
y = other.charposY;
}
if (powerMeterDraw == 1){
    with (powerMeterInstance) {
    x = other.charposX;
    y = other.charposY;
    image_xscale = 0.25;
    image_yscale = 0.26;
    }
}
// Re-calculate where the light should be
lightposY = charposY + charWidth;
lightposX = charposX + (charWidth/2);
//Adjust the lights coordinates to match that of the player
with (characterLight){
x = other.lightposX;
y = other.lightposY;

}

//instance_create(0, 0, obj_enemyBlue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw phase
draw_set_font(fnt_gameFont);
draw_set_colour(c_aqua);
draw_text(0, 0, "Score: " + string(global.score));

draw_text(200, 0, "Highscore: " + string(highscore_value(1)));

draw_text(0, 40, "PowerMeter: " + string(global.powerMeter ) + "/ 5");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
